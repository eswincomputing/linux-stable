// SPDX-License-Identifier: GPL-2.0
/*
 * ESWIN PCIe root complex driver
 *
 * Copyright 2024, Beijing ESWIN Computing Technology Co., Ltd.. All rights reserved.
 * SPDX-License-Identifier: GPL-2.0
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Authors: Lu XiangFeng <luxiangfeng@eswincomputing.com>
 */

/*generated by gen_register_table.py  author wubo */
#ifndef __PEC_REG_S__
#define __PEC_REG_S__
// #include <inttypes.h>
typedef struct PEC_REG_S {
    struct reg_op_en_trig {
        uint32_t address_offset;
        union op_en_trig_ {
            struct {
                uint32_t op_en_trig : 1;
                uint32_t Reserved : 31;
            };
            uint32_t value;
        } op_en_trig;
    } reg_op_en_trig;

    struct reg_op_status {
        uint32_t address_offset;
        union op_status_ {
            struct {
                uint32_t op_en_status : 1;
                uint32_t Reserved : 31;
            };
            uint32_t value;
        } op_status;
    } reg_op_status;

    struct reg_pec_spad_param0 {
        uint32_t address_offset;
        union pec_spad_param0_ {
            struct {
                uint32_t pe_c0 : 4;
                uint32_t pe_u : 4;
                uint32_t pe_s : 4;
                uint32_t pe_w0 : 10;
                uint32_t stride_v : 4;
                uint32_t Reserved : 6;
            };
            uint32_t value;
        } pec_spad_param0;
    } reg_pec_spad_param0;

    struct reg_pec_spad_param1 {
        uint32_t address_offset;
        union pec_spad_param1_ {
            struct {
                uint32_t f0_m0 : 10;
                uint32_t pe_m0 : 5;
                uint32_t padding_pending : 1;
                uint32_t first_unit : 5;
                uint32_t Reserved : 11;
            };
            uint32_t value;
        } pec_spad_param1;
    } reg_pec_spad_param1;

    struct reg_pec_glb_param0 {
        uint32_t address_offset;
        union pec_glb_param0_ {
            struct {
                uint32_t pec_m2 : 6;
                uint32_t pec_r3 : 6;
                uint32_t pec_e3 : 6;
                uint32_t pec_c2 : 6;
                uint32_t pec_n2 : 6;
                uint32_t Reserved : 2;
            };
            uint32_t value;
        } pec_glb_param0;
    } reg_pec_glb_param0;

    struct reg_pec_calc_mode {
        uint32_t address_offset;
        union pec_calc_mode_ {
            struct {
                uint32_t nan_to_zero_en : 1;
                uint32_t w_csc_en : 1;
                uint32_t iact_csc_en : 1;
                uint32_t pe_dat_type : 2;
                uint32_t psum_use_last : 1;
                uint32_t pe_simd_mode : 4;
                uint32_t e3_c2_stride : 4;
                uint32_t r3_e3_stride : 10;
                uint32_t Reserved : 8;
            };
            uint32_t value;
        } pec_calc_mode;
    } reg_pec_calc_mode;

    struct reg_router_cast_mode_padding {
        uint32_t address_offset;
        union router_cast_mode_padding_ {
            struct {
                uint32_t iact_src_en : 5;
                uint32_t weight_src_en : 3;
                uint32_t iact_mode : 4;
                uint32_t weight_mode : 2;
                uint32_t psum_glbc_enable : 1;
                uint32_t pec_psum_in_sel : 1;
                uint32_t e1_last_cnt : 2;
                uint32_t r1_last_cnt : 2;
                uint32_t r2_last_en : 1;
                uint32_t r_all : 8;
                uint32_t Reserved : 3;
            };
            uint32_t value;
        } router_cast_mode_padding;
    } reg_router_cast_mode_padding;

    struct reg_pec_space_offset0 {
        uint32_t address_offset;
        union pec_space_offset0_ {
            struct {
                uint32_t pe0_base_addr : 18;
                uint32_t Reserved : 14;
            };
            uint32_t value;
        } pec_space_offset0;
    } reg_pec_space_offset0;

    struct reg_pec_space_offset1 {
        uint32_t address_offset;
        union pec_space_offset1_ {
            struct {
                uint32_t m2_m1_f0_m0 : 18;
                uint32_t Reserved : 14;
            };
            uint32_t value;
        } pec_space_offset1;
    } reg_pec_space_offset1;
} PEC_REG_S;
#endif  // __PEC_REG_S__
