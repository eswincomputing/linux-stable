// SPDX-License-Identifier: GPL-2.0
/*
 * Device Tree Include file for Eswin EIC7702 SoC's cpu.
 *
 * Copyright 2024, Beijing ESWIN Computing Technology Co., Ltd.. All rights reserved.
 * SPDX-License-Identifier: GPL-2.0
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#define CHIPLET_AND_DIE (0x2)
#include "eswin-win2030-arch.dtsi"


&L64 {
	cpu-map {
	#if (CHIPLET_AND_DIE & 0x2)
		cluster0 {
			core0 {
				cpu = <&cpu_0>;
			};
			core1 {
				cpu = <&cpu_1>;
			};
			core2 {
				cpu = <&cpu_2>;
			};
			core3 {
				cpu = <&cpu_3>;
			};
		};
	#endif
		cluster1 {
			core0 {
				cpu = <&cpu_4>;
			};
		#ifndef PLATFORM_HAPS
			core1 {
				cpu = <&cpu_5>;
			};
			core2 {
				cpu = <&cpu_6>;
			};
			core3 {
				cpu = <&cpu_7>;
			};
		#endif
		};

	};

	cpu_4: cpu@4 {
		clock-frequency = <0>;
		compatible = "eswin,eic770x", "riscv";
		d-cache-block-size = <64>;
		d-cache-sets = <128>;
		d-cache-size = <32768>;
		d-tlb-sets = <1>;
		d-tlb-size = <32>;
		device_type = "cpu";
		hardware-exec-breakpoint-count = <4>;
		hwpf-distanceBits = <6>;
		hwpf-hitCacheThrdBits = <5>;
		hwpf-hitMSHRThrdBits = <4>;
		hwpf-l2pfPoolSize = <10>;
		hwpf-nIssQEnt = <6>;
		hwpf-nPrefetchQueueEntries = <8>;
		hwpf-nStreams = <16>;
		hwpf-qFullnessThrdBits = <4>;
		hwpf-windowBits = <6>;
		i-cache-block-size = <64>;
		i-cache-sets = <128>;
		i-cache-size = <32768>;
		i-tlb-sets = <1>;
		i-tlb-size = <32>;
		mmu-type = "riscv,sv48";
		next-level-cache = <&d1_l2_cache_0>;
	#if (CHIPLET_AND_DIE == 1)
	#ifdef PLATFORM_HAPS
		reg = <0x1>;
	#else
		reg = <0x4>;
	#endif
	#else
		reg = <0x4>;
	#endif
		riscv,isa = "rv64imafdch_zicsr_zifencei_zba_zbb_sscofpmf";
		riscv,pmpgranularity = <4096>;
		riscv,pmpregions = <8>;
		#if (CHIPLET_AND_DIE & 0x2)
		sifive,buserror = <&d1_bus_err0>;
		#endif
		status = "okay";
		timebase-frequency = <RTCCLK_FREQ>;
		tlb-split;
		numa-node-id = <1>;
		clocks = <&d1_clock WIN2030_CLK_CPU_EXT_SRC_CORE_CLK_0>;
		operating-points-v2 = <&d1_cpu_opp_table>;
		cpu-idle-states = <&CPU_RET>;
		cpu4_intc: interrupt-controller {
			#interrupt-cells = <1>;
			compatible = "riscv,cpu-intc";
			interrupt-controller;
		};

	};
#ifndef PLATFORM_HAPS
	cpu_5: cpu@5 {
		clock-frequency = <0>;
		compatible = "eswin,eic770x", "riscv";
		d-cache-block-size = <64>;
		d-cache-sets = <128>;
		d-cache-size = <32768>;
		d-tlb-sets = <1>;
		d-tlb-size = <32>;
		device_type = "cpu";
		hardware-exec-breakpoint-count = <4>;
		hwpf-distanceBits = <6>;
		hwpf-hitCacheThrdBits = <5>;
		hwpf-hitMSHRThrdBits = <4>;
		hwpf-l2pfPoolSize = <10>;
		hwpf-nIssQEnt = <6>;
		hwpf-nPrefetchQueueEntries = <8>;
		hwpf-nStreams = <16>;
		hwpf-qFullnessThrdBits = <4>;
		hwpf-windowBits = <6>;
		i-cache-block-size = <64>;
		i-cache-sets = <128>;
		i-cache-size = <32768>;
		i-tlb-sets = <1>;
		i-tlb-size = <32>;
		mmu-type = "riscv,sv48";
		next-level-cache = <&d1_l2_cache_1>;
		reg = <0x5>;
		riscv,isa = "rv64imafdch_zicsr_zifencei_zba_zbb_sscofpmf";
		riscv,pmpgranularity = <4096>;
		riscv,pmpregions = <8>;
		#if (CHIPLET_AND_DIE & 0x2)
		sifive,buserror = <&d1_bus_err1>;
		#endif
		status = "okay";
		timebase-frequency = <RTCCLK_FREQ>;
		tlb-split;
		numa-node-id = <1>;
		clocks = <&d1_clock WIN2030_CLK_CPU_EXT_SRC_CORE_CLK_1>;
		operating-points-v2 = <&d1_cpu_opp_table>;
		cpu-idle-states = <&CPU_RET>;
		cpu5_intc: interrupt-controller {
			#interrupt-cells = <1>;
			compatible = "riscv,cpu-intc";
			interrupt-controller;
		};

	};
	cpu_6: cpu@6 {
		clock-frequency = <0>;
		compatible = "eswin,eic770x", "riscv";
		d-cache-block-size = <64>;
		d-cache-sets = <128>;
		d-cache-size = <32768>;
		d-tlb-sets = <1>;
		d-tlb-size = <32>;
		device_type = "cpu";
		hardware-exec-breakpoint-count = <4>;
		hwpf-distanceBits = <6>;
		hwpf-hitCacheThrdBits = <5>;
		hwpf-hitMSHRThrdBits = <4>;
		hwpf-l2pfPoolSize = <10>;
		hwpf-nIssQEnt = <6>;
		hwpf-nPrefetchQueueEntries = <8>;
		hwpf-nStreams = <16>;
		hwpf-qFullnessThrdBits = <4>;
		hwpf-windowBits = <6>;
		i-cache-block-size = <64>;
		i-cache-sets = <128>;
		i-cache-size = <32768>;
		i-tlb-sets = <1>;
		i-tlb-size = <32>;
		mmu-type = "riscv,sv48";
		next-level-cache = <&d1_l2_cache_2>;
		reg = <0x6>;
		riscv,isa = "rv64imafdch_zicsr_zifencei_zba_zbb_sscofpmf";
		riscv,pmpgranularity = <4096>;
		riscv,pmpregions = <8>;
		#if (CHIPLET_AND_DIE & 0x2)
		sifive,buserror = <&d1_bus_err2>;
		#endif
		status = "okay";
		timebase-frequency = <RTCCLK_FREQ>;
		tlb-split;
		numa-node-id = <1>;
		clocks = <&d1_clock WIN2030_CLK_CPU_EXT_SRC_CORE_CLK_2>;
		operating-points-v2 = <&d1_cpu_opp_table>;
		cpu-idle-states = <&CPU_RET>;
		cpu6_intc: interrupt-controller {
			#interrupt-cells = <1>;
			compatible = "riscv,cpu-intc";
			interrupt-controller;
		};

	};
	cpu_7: cpu@7 {
		clock-frequency = <0>;
		compatible = "eswin,eic770x", "riscv";
		d-cache-block-size = <64>;
		d-cache-sets = <128>;
		d-cache-size = <32768>;
		d-tlb-sets = <1>;
		d-tlb-size = <32>;
		device_type = "cpu";
		hardware-exec-breakpoint-count = <4>;
		hwpf-distanceBits = <6>;
		hwpf-hitCacheThrdBits = <5>;
		hwpf-hitMSHRThrdBits = <4>;
		hwpf-l2pfPoolSize = <10>;
		hwpf-nIssQEnt = <6>;
		hwpf-nPrefetchQueueEntries = <8>;
		hwpf-nStreams = <16>;
		hwpf-qFullnessThrdBits = <4>;
		hwpf-windowBits = <6>;
		i-cache-block-size = <64>;
		i-cache-sets = <128>;
		i-cache-size = <32768>;
		i-tlb-sets = <1>;
		i-tlb-size = <32>;
		mmu-type = "riscv,sv48";
		next-level-cache = <&d1_l2_cache_3>;
		reg = <0x7>;
		riscv,isa = "rv64imafdch_zicsr_zifencei_zba_zbb_sscofpmf";
		riscv,pmpgranularity = <4096>;
		riscv,pmpregions = <8>;
		#if (CHIPLET_AND_DIE & 0x2)
		sifive,buserror = <&d1_bus_err3>;
		#endif
		status = "okay";
		timebase-frequency = <RTCCLK_FREQ>;
		tlb-split;
		numa-node-id = <1>;
		clocks = <&d1_clock WIN2030_CLK_CPU_EXT_SRC_CORE_CLK_3>;
		operating-points-v2 = <&d1_cpu_opp_table>;
		cpu-idle-states = <&CPU_RET>;
		cpu7_intc: interrupt-controller {
			#interrupt-cells = <1>;
			compatible = "riscv,cpu-intc";
			interrupt-controller;
		};

	};
#endif
};

&SOC {
	#address-cells = <2>;
	#size-cells = <2>;
	compatible = "SiFive,FU800-soc", "fu800-soc", "sifive-soc", "simple-bus";
	ranges;
	PMU1: pmu@1 {
		riscv,raw-event-to-mhpmcounters = <0x0 0x0  0xffffffff 0xff          0x1f8
											0x0 0x1  0xffffffff 0xfff800ff    0x1f8
											0x0 0x2  0xffffffff 0xffffc0ff    0x1f8>;
		riscv,event-to-mhpmcounters = <0x01 0x01 0x01 0x02 0x02 0x02 0x4 0x6 0x1f8 0x10009 0x10009 0x1f8 0x10019 0x10019 0x1f8 0x10021 0x10021 0x1f8>;
		riscv,event-to-mhpmevent = <0x4 0x0 0x202 0x5 0x0 0x4000 0x6 0x0 0x2001 0x10009 0x0 0x102 0x10019 0x0 0x1002 0x10021 0x0 0x802>;
		compatible = "riscv,pmu0", "riscv,pmu";
		interrupts-extended = <&cpu4_intc 13 &cpu5_intc 13 &cpu6_intc 13 &cpu7_intc 13>;
	};

	d1_bus_err0: bus-error-unit@21700000 {
		compatible = "sifive,buserror";
		interrupt-parent = <&plic1>;
		interrupts = <517>;
		reg = <0x0 0x21700000 0x0 0x1000>;
		reg-names = "control";
	};
	d1_bus_err1: bus-error-unit@21701000 {
		compatible = "sifive,buserror";
		interrupt-parent = <&plic1>;
		interrupts = <518>;
		reg = <0x0 0x21701000 0x0 0x1000>;
		reg-names = "control";
	};
	d1_bus_err2: bus-error-unit@21702000 {
		compatible = "sifive,buserror";
		interrupt-parent = <&plic1>;
		interrupts = <519>;
		reg = <0x0 0x21702000 0x0 0x1000>;
		reg-names = "control";
	};
	d1_bus_err3: bus-error-unit@21703000 {
		compatible = "sifive,buserror";
		interrupt-parent = <&plic1>;
		interrupts = <520>;
		reg = <0x0 0x21703000 0x0 0x1000>;
		reg-names = "control";
	};

	D1CACHE: cache-controller@22010000 {
		cache-block-size = <64>;
		cache-level = <3>;
		cache-sets = <4096>;
		cache-size = <4194304>;
		cache-unified;
		compatible = "sifive,ccache1", "cache", "sifive,fu740-c000-ccache";
		interrupt-parent = <&plic1>;
		interrupts = <1>, <3>, <4>, <2>;
		//next-level-cache = <&L9 &L10 &L11 &D2MEM>;
		next-level-cache = <&L9 &L10 &L11>;
		reg = <0x0 0x22010000 0x0 0x4000 0x0 0x8000000 0x0 0x400000>;
		reg-names = "control", "sideband";
		sifive,a-mshr-count = <60>;
		sifive,bank-count = <4>;
		sifive,ecc-granularity = <8>;
		sifive,max-master-id = <13>;
		sifive,perfmon-counters = <6>;
		numa-node-id = <1>;
	};


	plic1: interrupt-controller@2c000000 {
		#interrupt-cells = <1>;
		compatible = "sifive,plic-1.0.0";
		interrupt-controller;
		interrupts-extended = <
			&cpu4_intc 0xffffffff &cpu4_intc 9
		#ifndef PLATFORM_HAPS
			&cpu5_intc 0xffffffff &cpu5_intc 9
			&cpu6_intc 0xffffffff &cpu6_intc 9
			&cpu7_intc 0xffffffff &cpu7_intc 9
		#endif
			>;
		reg = <0x0 0x2c000000 0x0 0x4000000>;
		reg-names = "control";
		riscv,max-priority = <7>;
		riscv,ndev = <520>;
		numa-node-id = <1>;
	};

	d1_l2_cache_0: pl2@20104000 {
		cache-block-size = <64>;
		cache-level = <2>;
		cache-sets = <512>;
		cache-size = <262144>;
		cache-unified;
		compatible = "sifive,pL2Cache0", "cache";
		next-level-cache = <&D1CACHE>;
		reg = <0x0 0x20104000 0x0 0x4000>;
		reg-names = "control";
		sifive,ecc-granularity = <16>;
		sifive,perfmon-counters = <6>;
	};
	d1_l2_cache_1: pl2@20108000 {
		cache-block-size = <64>;
		cache-level = <2>;
		cache-sets = <512>;
		cache-size = <262144>;
		cache-unified;
		compatible = "sifive,pL2Cache0", "cache";
		next-level-cache = <&D1CACHE>;
		reg = <0x0 0x20108000 0x0 0x4000>;
		reg-names = "control";
		sifive,ecc-granularity = <16>;
		sifive,perfmon-counters = <6>;
	};
	d1_l2_cache_2: pl2@2010c000 {
		cache-block-size = <64>;
		cache-level = <2>;
		cache-sets = <512>;
		cache-size = <262144>;
		cache-unified;
		compatible = "sifive,pL2Cache0", "cache";
		next-level-cache = <&D1CACHE>;
		reg = <0x0 0x2010c000 0x0 0x4000>;
		reg-names = "control";
		sifive,ecc-granularity = <16>;
		sifive,perfmon-counters = <6>;
	};
	d1_l2_cache_3: pl2@20110000 {
		cache-block-size = <64>;
		cache-level = <2>;
		cache-sets = <512>;
		cache-size = <262144>;
		cache-unified;
		compatible = "sifive,pL2Cache0", "cache";
		next-level-cache = <&D1CACHE>;
		reg = <0x0 0x20110000 0x0 0x4000>;
		reg-names = "control";
		sifive,ecc-granularity = <16>;
		sifive,perfmon-counters = <6>;
	};
};

